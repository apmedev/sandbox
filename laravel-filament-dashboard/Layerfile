# Use an Ubuntu 18.04 base for our staging server
FROM vm/ubuntu:18.04

# To note: Layerfiles create entire VMs, *not* containers!

# Install php5 & composer
RUN apt-get update && \
    apt-get install software-properties-common -y && \
    add-apt-repository ppa:ondrej/php -y && \
    apt-get update && \
    apt-get install curl php8.1-cli php8.1-mbstring php8.1-zip php8.1-dom \
            git unzip -y

RUN curl -sS https://getcomposer.org/installer -o composer-setup.php && \
    php composer-setup.php --install-dir=/usr/local/bin --filename=composer && \
    rm composer-setup.php

RUN apt-get upgrade -y

# Install Node.js and npm
RUN curl -fsSL https://deb.nodesource.com/setup_14.x | bash - && \
    apt-get install -y nodejs

# Install laravel
ENV COMPOSER_ALLOW_SUPERUSER=1 PATH=~/.config/composer/vendor/bin:$PATH
RUN composer global require laravel/installer

# Create sample blog
# Configure SSH for cloning private repository
RUN apt-get install -y openssh-client

# Copy the SSH private key to the container
COPY ~/.ssh/id_rsa ~/.ssh/id_rsa

# Set the permissions for the SSH private key
RUN chmod 600 ~/.ssh/id_rsa

# Add the GitHub host to known hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

# Create sample blog
RUN --mount=type=ssh git clone git@github.com:apmedev/aggregator.git /aggregator

WORKDIR /aggregator
RUN composer install --ignore-platform-req=ext-curl
RUN cp .env.example .env
RUN php artisan key:generate
RUN php artisan ui tall --auth
RUN php artisan config:clear
RUN npm install
RUN npm run dev
